name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.7)'
        required: true
        type: string

jobs:
  setup-and-generate-pom:
    name: Setup and Generate POM
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Find and update version in build files
      run: |
        # Your project uses build.gradle.kts
        BUILD_FILE="build.gradle.kts"
        
        if [ ! -f "$BUILD_FILE" ]; then
          echo "build.gradle.kts file not found!"
          ls -la
          exit 1
        fi
        
        echo "Found build file: $BUILD_FILE"
        
        # Update version in Kotlin DSL format
        sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.version }}"/' "$BUILD_FILE"
        
        echo "Updated version in $BUILD_FILE to ${{ steps.version.outputs.version }}"
        echo "BUILD_FILE=$BUILD_FILE" >> $GITHUB_ENV
        
        # Verify the change
        echo "Version line after update:"
        grep "version = " "$BUILD_FILE" || echo "Version line not found with grep"
        
    - name: Generate POM file
      run: |
        # Make gradlew executable if it exists
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          GRADLE_CMD="./gradlew"
        else
          # Fallback to system gradle
          GRADLE_CMD="gradle"
        fi
        
        echo "First, let's see what publishing tasks are available:"
        $GRADLE_CMD tasks --group=publishing --info
        
        echo "Trying to generate POM file..."
        # For Gradle plugin projects, sometimes the tasks have different names
        if $GRADLE_CMD generatePomFileForMavenPublication --info; then
          echo "✅ POM generated with generatePomFileForMavenPublication"
        elif $GRADLE_CMD generatePomFileForPluginMavenPublication --info; then
          echo "✅ POM generated with generatePomFileForPluginMavenPublication"
        else
          echo "Trying to use publishToMavenLocal to generate POM..."
          $GRADLE_CMD publishToMavenLocal --info
        fi
        
        echo "Checking what was generated..."
        find build -name "*.xml" -type f | head -10
        
    - name: Prepare Maven structure
      run: |
        mkdir -p target
        
        # Look for any generated POM files in various locations
        echo "Looking for generated POM files..."
        POM_LOCATIONS=(
          "build/publications/maven/pom-default.xml"
          "build/publications/pluginMaven/pom-default.xml"
          "build/publications/gradldromusPluginMarkerMaven/pom-default.xml"
        )
        
        POM_FILE=""
        for location in "${POM_LOCATIONS[@]}"; do
          if [ -f "$location" ]; then
            POM_FILE="$location"
            echo "✅ Found POM at: $location"
            break
          fi
        done
        
        # If not found in expected locations, search broadly
        if [ -z "$POM_FILE" ]; then
          echo "Looking for any POM files in build directory..."
          POM_FILE=$(find build -name "pom*.xml" -type f | head -1)
        fi
        
        if [ -z "$POM_FILE" ]; then
          echo "❌ No POM file found anywhere!"
          echo "All XML files in build directory:"
          find build -name "*.xml" -type f || echo "No XML files found"
          echo "Directory structure:"
          find build -type d | head -20
          exit 1
        fi
        
        echo "Using POM file: $POM_FILE"
        # Copy the generated POM to root for Maven compatibility
        cp "$POM_FILE" pom.xml
        
        echo "Generated pom.xml content (first 20 lines):"
        head -20 pom.xml
        
    - name: Upload POM and Gradle artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          pom.xml
          build.gradle.kts
          gradle.properties
          settings.gradle.kts
          libs.versions.toml
          build/libs/*.jar
          build/publications/**/*.xml
        retention-days: 1

  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: setup-and-generate-pom
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Validate project
      run: mvn clean validate -Dmaven.gpg.skip=true
      
    - name: Run full test suite
      run: mvn test -Dmaven.gpg.skip=true
      
    - name: Verify package can be built
      run: mvn package -DskipTests -Dmaven.gpg.skip=true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [setup-and-generate-pom, validate]
    outputs:
      version: ${{ needs.setup-and-generate-pom.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build release artifacts
      run: |
        mvn clean package -DskipTests -Dmaven.gpg.skip=true
        mvn source:jar -Dmaven.gpg.skip=true
        mvn javadoc:jar -Dmaven.gpg.skip=true
        
    - name: Create release notes
      id: release_notes
      run: |
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> release_notes.md
          git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)" >> release_notes.md
        else
          echo "### All commits in this release:" >> release_notes.md
          git log --oneline --pretty=format:"- %s (%h)" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Artifacts" >> release_notes.md
        echo "- **JAR**: \`clojog-${{ needs.setup-and-generate-pom.outputs.version }}.jar\`" >> release_notes.md
        echo "- **Sources**: \`clojog-${{ needs.setup-and-generate-pom.outputs.version }}-sources.jar\`" >> release_notes.md
        echo "- **Javadoc**: \`clojog-${{ needs.setup-and-generate-pom.outputs.version }}-javadoc.jar\`" >> release_notes.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.setup-and-generate-pom.outputs.version }}
        name: Release v${{ needs.setup-and-generate-pom.outputs.version }}
        body_path: release_notes.md
        files: |
          target/clojog-${{ needs.setup-and-generate-pom.outputs.version }}.jar
          target/clojog-${{ needs.setup-and-generate-pom.outputs.version }}-sources.jar
          target/clojog-${{ needs.setup-and-generate-pom.outputs.version }}-javadoc.jar
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-maven-central:
    name: Publish to Maven Central
    runs-on: ubuntu-latest
    needs: [setup-and-generate-pom, validate, release]
    if: github.repository == 'clojang/clojog'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          
          # List keys to verify import
          echo "Imported GPG keys:"
          gpg --list-secret-keys --keyid-format LONG

      - name: Publish to Maven Central
        run: |
          mvn clean deploy -DskipTests -Pmaven-central,sign-artifacts
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [setup-and-generate-pom, validate, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Publish to GitHub Packages
        run: |
          mvn clean deploy -DskipTests -Pgithub-packages -Dmaven.gpg.skip=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [setup-and-generate-pom, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Update version in README
        run: |
          sed -i 's/<version>[0-9]*\.[0-9]*\.[0-9]*<\/version>/<version>${{ needs.setup-and-generate-pom.outputs.version }}<\/version>/g' README.md
          sed -i "s/clojog:[0-9]*\.[0-9]*\.[0-9]*/clojog:${{ needs.setup-and-generate-pom.outputs.version }}/g" README.md

      - name: Generate Javadoc
        run: |
          mvn javadoc:javadoc -Dmaven.gpg.skip=true

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/site/apidocs
          destination_dir: javadoc

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation for release v${{ needs.setup-and-generate-pom.outputs.version }}"
            git push origin main
          fi