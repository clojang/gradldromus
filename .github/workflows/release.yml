name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.7)'
        required: true
        type: string

jobs:
  build-and-validate:
    name: Build and Validate with Gradle
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Update version in build.gradle.kts
      run: |
        BUILD_FILE="build.gradle.kts"
        
        if [ ! -f "$BUILD_FILE" ]; then
          echo "build.gradle.kts file not found!"
          ls -la
          exit 1
        fi
        
        echo "Found build file: $BUILD_FILE"
        
        # Update version in Kotlin DSL format
        sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.version }}"/' "$BUILD_FILE"
        
        echo "Updated version in $BUILD_FILE to ${{ steps.version.outputs.version }}"
        
        # Verify the change
        echo "Version line after update:"
        grep "version = " "$BUILD_FILE" || echo "Version line not found with grep"
        
    - name: Run full validation with Gradle
      run: |
        # Make gradlew executable if it exists
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          GRADLE_CMD="./gradlew"
        else
          GRADLE_CMD="gradle"
        fi
        
        echo "Running full Gradle build and test suite..."
        # Disable signing during validation by not providing signing credentials
        $GRADLE_CMD clean build --info
        
    - name: Generate all artifacts
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          GRADLE_CMD="./gradlew"
        else
          GRADLE_CMD="gradle"
        fi
        
        echo "Generating all publication artifacts..."
        # First try: Exclude all signing tasks explicitly
        if $GRADLE_CMD publishToMavenLocal -x signMavenPublication -x signPluginMavenPublication -x signGradldromusPluginMarkerMavenPublication --info; then
          echo "✅ Successfully generated artifacts without signing"
        else
          echo "⚠️  Failed with signing exclusion, trying alternative approach..."
          # Alternative: Just build the JARs and generate POMs separately
          $GRADLE_CMD clean build --info
          $GRADLE_CMD generatePomFileForMavenPublication --info || echo "POM generation may have failed"
          $GRADLE_CMD generatePomFileForPluginMavenPublication --info || echo "Plugin POM generation may have failed"
        fi
        
        echo "Checking generated artifacts..."
        find build -name "*.jar" -type f
        find build -name "*.xml" -type f | grep -E "(pom|publication)"
        
    - name: Prepare artifacts for release
      run: |
        mkdir -p release-artifacts
        
        # Copy JARs
        find build/libs -name "*.jar" -exec cp {} release-artifacts/ \;
        
        # Find and copy the main POM (avoiding plugin marker POMs)
        MAIN_POM=$(find build/publications -name "pom-default.xml" -type f | grep -v "PluginMarker" | head -1)
        if [ -n "$MAIN_POM" ]; then
          cp "$MAIN_POM" release-artifacts/pom.xml
          echo "Using POM: $MAIN_POM"
        else
          echo "No suitable POM found"
          exit 1
        fi
        
        # List what we have
        echo "Release artifacts:"
        ls -la release-artifacts/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: release-artifacts/
        retention-days: 1

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-validate
    outputs:
      version: ${{ needs.build-and-validate.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: release-artifacts/
        
    - name: Create release notes
      id: release_notes
      run: |
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> release_notes.md
          git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)" >> release_notes.md
        else
          echo "### All commits in this release:" >> release_notes.md
          git log --oneline --pretty=format:"- %s (%h)" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Artifacts" >> release_notes.md
        
        # List actual artifacts
        for jar in release-artifacts/*.jar; do
          if [ -f "$jar" ]; then
            basename_jar=$(basename "$jar")
            echo "- **JAR**: \`$basename_jar\`" >> release_notes.md
          fi
        done
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.build-and-validate.outputs.version }}
        name: Release v${{ needs.build-and-validate.outputs.version }}
        body_path: release_notes.md
        files: release-artifacts/*.jar
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-maven-central:
    name: Publish to Maven Central
    runs-on: ubuntu-latest
    needs: [build-and-validate, release]
    if: github.repository == 'clojang/gradldromus'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Update version in build.gradle.kts
        run: |
          sed -i 's/version = "[^"]*"/version = "${{ needs.build-and-validate.outputs.version }}"/' build.gradle.kts

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          
          # List keys to verify import
          echo "Imported GPG keys:"
          gpg --list-secret-keys --keyid-format LONG

      - name: Publish to Maven Central via Gradle
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            GRADLE_CMD="./gradlew"
          else
            GRADLE_CMD="gradle"
          fi
          
          # Use Gradle's nexus publishing plugin to publish to Maven Central
          $GRADLE_CMD publishToSonatype closeAndReleaseSonatypeStagingRepository
        env:
          SONATYPE_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          SIGNING_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          SIGNING_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          SIGNING_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [build-and-validate, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Update version in build.gradle.kts
        run: |
          sed -i 's/version = "[^"]*"/version = "${{ needs.build-and-validate.outputs.version }}"/' build.gradle.kts

      - name: Publish to GitHub Packages via Gradle
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            GRADLE_CMD="./gradlew"
          else
            GRADLE_CMD="gradle"
          fi
          
          # For GitHub Packages, we don't need signing, so we can exclude signing tasks
          echo "Publishing to GitHub Packages (without signing)..."
          $GRADLE_CMD publishMavenPublicationToGitHubPackagesRepository -x signMavenPublication --info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [build-and-validate, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Update version in README
        run: |
          sed -i 's/<version>[0-9]*\.[0-9]*\.[0-9]*<\/version>/<version>${{ needs.build-and-validate.outputs.version }}<\/version>/g' README.md
          sed -i "s/gradldromus:[0-9]*\.[0-9]*\.[0-9]*/gradldromus:${{ needs.build-and-validate.outputs.version }}/g" README.md

      - name: Generate Javadoc via Gradle
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            GRADLE_CMD="./gradlew"
          else
            GRADLE_CMD="gradle"
          fi
          
          # Update version and generate Javadoc
          sed -i 's/version = "[^"]*"/version = "${{ needs.build-and-validate.outputs.version }}"/' build.gradle.kts
          $GRADLE_CMD javadoc

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/javadoc
          destination_dir: javadoc

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation for release v${{ needs.build-and-validate.outputs.version }}"
            git push origin main
          fi